클래스(Class)

 - 객체의 설계도 역할을 하는 프로그램 소스

 - 공장에서 하나의 설계도를 사용하여 여러 개의 제품을 생산할 수 있는 것처럼 하나의 클래스를 통해 

    동일한 구조를 갖는 객체를 여러개 생성할 수 있다.

 - 엔진, 문, 바퀴, .... 명사적인 특성 : 멤버 변수, 프로버티 (변수)

 - 전진, 후진, 기능, 동사적인 특성 : 메소드

 - 동일한 설계로 만들어진 자동차라 하더라도 각각의 자동차를 구성하는 부품들은 그 형태만 같을 뿐, 

   실제로는 각각 존재하게 된다.

 - 클래스를 작성하면 그 안에 생성되는 멤버 변수들은 여러개의 객체간에 서로 동일한 이름으로 존재하지만, 

   실제로는 서로 다른 값이라는 의미.





클래스의 기본 작성 방법

    

  Class 클래스 이름 {

        멤버 변수;

        void 메소드이름 ( ) { ..................}

    }

​

 - 'Class'라는 예약어와 클래스의 이름을 명시하고 {...} 블록을 구성한다.

 - 멤버변수는 여러 개 존재할 수 있다. 이때, 값을 값을 선언과 동시에 할 수 있고, 

    객체를 통해 간접적으로 할당할 수도 있다.

 - 메소드는 여러 개 존재할 수 있다.

 - 클래스 안에 포함된 멤버변수와 메소드를 특성에 따라 그룹화 하기 위한 기법이 클래스를 작성한 것이라고 

    이해할 수 있다.

​

객체의 생성 방법

 - 객체의 선언

       클래스 이름 객체이름;

 - 객체의 할당

       객체이름 = new 클래스 이름( );

 - 선언과 할당의 통합

        클래스 이름 객체이름 = new 클래스 이름( );


객체의 사용

 - 객체 안에 포함된 변수나 메소드는 점(.)으로 연결하여 접근한다.

         객체이름.멤버변수;

         객체이름.메소드이름( );

         객체이름.메소드이름(값, 값, ........);

​

값이 대입되지 않은 멤버변수를 갖는 클래스

 - 클래스란, 객체를 위한 틀을 제공하는 것이기 때문에 클래스 작성하는 과정에서 멤버변수에 대입된 값은, 

                    객체를 통하여 멤버변수의 값을 지정하기 전까지 사용될 "기본값" 으로서의 의미이다.

​

 - 객체를 통하여 새로운 값이 대입되면 클래스 작성시에 멤버연수에 대입한 값은 의미를 잃어버리게 된다.

    때문에 일반적으로 클래스 작성시에는 멤버변수에 값을 지정하지 않는다.

1. 메서드를 포함하는 클래스
   - 메서드란 프로그램에서 하나의 동작 단위를 의미한다.
   - 두 개 이사의 메서드가 서로 동일한 대상을 위해 존재할 경우,
   이 메서드들을 클래스에 포함시켜 그룹화 할 수 있다.
   - 클래스에 멤버변수와 메서드가 공존할 경우, 멤버변수는 모든 메서드가 공유하는
   전역변수로 존재하게 된다.
   
   1-1. 변수의 종류
     - 멤버변수(=전역변수)
	  -> 클래스 안에서 선언된 변수로서, 클래스 블록 범위 안에서 유효한다.
     - 지역변수
	-> 메서드 안에서 선언된 변수로서, 메서드의 블록을 빠져나가지 못한다.
 	그러므로 다른 메서드는 해당 변수를 인식하지 못한다. 이 규칙은
	조건, 반복문 같은 블록 {}를 형성하는 모든 경우에 해당된다.
    1-2. 메서드만을 포함하는 클래스 
      - 객체 안에 멤버변수(=전역변수)가 포함되지 않는다
	   -> 데이터가 포함되지 않는다.
      - 객체 안에 포함된 메서드를 호출하여 결과를 만들기 위한 목적이므로 굳이 여러 개의 
      객체를 생성할 필요가 없다.

2. this
  2-1. this란
    - 클래스안에서 this를 사용하여 "자기자신"을 표현한다.
   
  2-2. this를 사용하여 지역변수와 멤버변수 구분하기
     - 멤버변수와 지역변수가 동일한 이름으로 공존한 경우, 유효성의 범위가 작은 변수가
     우선적으로 인식된다.
 	
	class User{
		String name;  //전역변수(1)
		
		public void setName(){
			String name; //지역변수(2)
			name="자바학생";   //지역변수 name
			this.name = "JSP학생"; // 전역변수 name
			// this.name : 멤버변수로 선언된 name을 의미
		}
	}
    -----------------------------------------------------------------------------------------------------------
    - 파라미터도 해당 메서드 안에서만 유효한 지역변수의 일종이다.
    - 파라미터를 사용하여 멤버변수의 값을 간접적으로 설정하고자 할 경우,
    변수의 이름을 서로 다르게 사용하는 것 보다는 이름은 동일하게 지정하고
    this 키워드를 사용하여 멤버변수와 파라미터를 구별하는 것이 java언어의 일반적 처리방식이다. 
    class Student{
  	String name;
	
	public  void setName(String name){
		this.name = name;
	                전역변수  지역변수
	}	
    }
      
  2-3. 현재 클래스의 메서드를 의미하는 용도로서의 this
	- 메서드의 경우 this.getName()이 아닌, getName()만 사용하더라도
	코드의 가독성의 문제는 없다.

	class Student{
		public String getName(){
			String name = "자바학생";
			returnname;
		}

		public void sayName(){
			String myname = 	this.getName();
			System.out.println(myname);
			//자바학생이 출력됨
		}
	}
     ------------------------------------------------------------------------------

3. 클래스, 메서드, 상수의 이름 규칙
   3-1 공통규칙
    - 영어+숫자+언더바(_)의 조합이고, 첫 글자는 반드시 영어로 한다.

   3-2. 클래스 이름 규칙
    - 첫 글자는 대문자로 시작, 나머지 글자는 소문자로 표시한다.
    - 두 개 이상의 단어를 조합해야 할 경우 새로운 단어는 대문자로 시작한다(카멜 표기법)
   3-3. 메서드, 변수 이름규칙 
     - 대부분 소문자로 구성됨
   3-4. 상수 이름규칙
     - 모두 대문자로 표시한다

4.  생성자
	
	class Member{ .. }
   
  	Member member = new Member();

       - new 키워드를 사용하여 객체가 생성될 때 자동으로 실행되는 특수한 형태의 메서드
       - 리터형을 명시하지 않으며,메서드의 이름은 클래스와 동일하다.
       - 자동으로 실행되는 특성 때문에, 객체가 생성되면서 해당 객체의 특성을 초기화 하기
       위하여 사용된다.(ex:멤버변수의 초기값을 할당하는 용도)	

 *  - 파라미터에 의해 결과를 리턴하는 경우,
 *  서로 다른 값을 위하여 객체를 여러개 생성할 필요가 없다.
 *  - 자체적으로 데이터를 갖는 형태가 아니라
 *  외부적 요인인 파라미터에 의해서 결과가 생성므로,
 *  하나의 객체를 재사용하는 것이 바람직하다.

* - 멤버변수는 지역변수와 구별하기 위해 가급적 this를 통하여 접근한다
* - 메서드에 접근할 때 this키워드를 사용하는 것이 필수적인 것은 아니다.
   