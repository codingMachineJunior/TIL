1. 생성자
  1-1. 기본 생성자
    - 파라미터가 없는 생성자
    - 클래스에 특별히 생성자가 정의되지 않은 경우 java컴파일러는 기본 생성자가
      존재한다고 인식한다.
	
	class User{
		user(){
			//생성자는 있지만, 내용은 비어 있다.
		}
	}
   1-2. 파라미터를 갖는 생성자
     - 생성자도 메서드의 한 종류이므로 파라미터를 함께 정의하는 것이 가능하다.
     - 생성자의 파라미터를 멤버변수에 복사하는 것으로 객체의 초기화를 외부적인 요인에 의해
     처리할 수 있다.

2. 은닉성
  2-1. 은닉성 이란?
    - 멤버변수나 메서드가 객체에 노출되지 않도록 설정하는 기법
    - 객체를 사용하는 측의 실수로 인한 기능의 오작동을 방지하기 위해,
    클래스의 일부를 숨기는 처리를 말한다.

  2-2. 적용방법
    - 변수의 이름이나 메서드 이름 앞에 "접근 한정자"를 지정한다.
  
    - public 
	-> 모든 곳에서 접근 가능하다.
             -> 일반적으로 모든 메서드 앞에 명시한다.  
    - private
 	-> 클래스 안에서만 사용 가능, 객체를 통해 접근할 수 없다.
	-> 일반적으로 모든 멤버변수 앞에 명시한다.
    -  protected
	-> 현재 클래스 내의 다른 자원이나, 같은 패키지 안에 존재하는클래스와
	하위 클래스에서접근 가능하다. 잘 사용하지 않는다.
    - default
   	-> 접근 한정자를 명시하지 않은 경우. 현재 클래스 내의 다른 자원이나
	동일한 패키지 내의 다른 클래스에서 접근 가능하다. 잘 사용하지 않는다.

 2-3. 자바빈즈(JavaBeans)	
     - getter, setter
     - 멤버변수가 은닉된 형태로 선언된 경우 프로그램의 가장 근본적인 목적인 데이터에 접근하는 
     바업이 사라지므로 메서드를 통하여 간접적으로 접근하는 방법이 마련되어야 한다.
     - getter, setter 는 은닉된 멤버변수에 간접적으로 접근하기 위하여 정의된 메서드들을
     의미하는 용어이다.
	
	    -> getter : 은닉된 멤버변수의 값을 리턴하기 위한 메서드
 
	    -> setter : 파라미터로 전달된 값을 멤버변수에 복사하기 위한 메서드

      -   메서드 작성 예
	
	멤버변수 이름 : private String userName;
	getter : private getUserName(){}
	setter : void setUserName(String userName){}
	
       - "get", "set" 접두사 뒤에 변수이을 첫 글자가대문자인형태로 명시
       - getter는 연결된 멤버변수의 데이터 타입을리턴형으로 명서
       - setter는 연결된 멤버변수의 데이터 타입을 파라미터 형식으로 명시
  
  2-4. 클래스에 접근 한정자를 지정하는 경우
    - public : 객체 생성이 가능하고, 서로 다른 소스코드에 정의된 클래스끼리도 객체 생성 가능.

    - privat : 클래스에 적용할 수 없다.
 
    - protected : 클랫에 적용할 수 없다.

    - default : 동일한 소스코드에 정의된 클래스끼리만객체로 생성 가능
	     (지금까지의 예제 형태)

  3. 상속성
     3-1. 클래스 간의 상속이란?
       - 클래스간에는 부모-자식의 상속 관계를 설정할 수 있다.
       - 부모 클래스A 자식 클래스B가 상속 받을 때,  B는 A의 모든 멤버변수와 메서드를
       자신의 것으로 상속받게 된다.
       (단, private로 설저오딘 기능은 상속되지 않는다.)
       - 상속 가능   :  public, protected
       - 자식 클래스B A의 정의된 public, protected 기능을 직접적으로 코딩하지 않더라도
       자신의 것으로 사용할 수 있게 된다.
     3-2. 상속의 정의 방법
      - extends 키워드를 사용해서 부모 클래스의 이름을 명시한다.
	
	public class 자식클래스 extends 부모클래스 {.....}